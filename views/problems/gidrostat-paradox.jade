extends ../layout

append scripts
    script(src='/js/utils.js')
    script(src='/js/ball.js')
    script(src='/js/line.js')
    script(src='/js/stats.min.js')

block title
  title Gidrostatic Paradox

block header
  h1 Gidrostatic Paradox

block content
  canvas(id='canvas1', class='canvas-wrapper', width='600', height='480') No canvas support in your browser

block add_scripts
    script
      var stats = new Stats();
        stats.setMode( 1 );
        stats.domElement.style.position = 'absolute';
        stats.domElement.style.right = '200px';
        stats.domElement.style.top = '30px';
        document.body.appendChild( stats.domElement );

      var canvas = document.getElementById('canvas1'),
          context = canvas.getContext('2d'),
          lines = [],
          dots = [],
          numDots = 300,
          gravity = 0,
          bounce = -1;
      context.strokeStyle = utils.colorToRGB("#ffffff", 255);

      for (var dot, i = 0; i < numDots; i++) {
        dot = new Ball(5, Math.random() * 0xffffff);
        dot.x = Math.random() * canvas.width/2 + canvas.width/4;
        dot.y = Math.random() * canvas.height;
        dot.vx = Math.random()*4 - 2;
        dot.vy = Math.random()*4 - 2;
        dot.lineWidth = 0;
        dots.push(dot);
      }

      //create 5 lines, position and rotate
      lines[0] = new Line(-300, 0, 300, 0);
      lines[0].x = canvas.width/8;
      lines[0].y = canvas.height/2;
      lines[0].rotation = Math.atan2(canvas.height, canvas.width/4);

      lines[1] = new Line(-300, 0, 300, 0);
      lines[1].x = 7*canvas.width/8;
      lines[1].y = canvas.height/2;
      lines[1].rotation = Math.atan2(-canvas.height, canvas.width/4);

      function checkLine (line) {
        var bounds = line.getBounds();

        for(var i=0; i<dots.length; i++){
          var ball = dots[i];

          if (ball.x + ball.radius > bounds.x && ball.x - ball.radius < bounds.x + bounds.width) {
            //get angle, sine, and cosine
            var cos = Math.cos(line.rotation),
                sin = Math.sin(line.rotation),
                //get position of ball, relative to line
                x1 = ball.x - line.x,
                y1 = ball.y - line.y,
                //rotate coordinates
                y2 = cos * y1 - sin * x1,
                //rotate velocity
                vy1 = cos * ball.vy - sin * ball.vx;
            //perform bounce with rotated values
            if (y2 > -ball.radius && y2 < vy1) {
              //rotate coordinates
              var x2 = cos * x1 + sin * y1,
                  //rotate velocity
                  vx1 = cos * ball.vx + sin * ball.vy;
              y2 = -ball.radius;
              vy1 *= bounce;
              //rotate everything back
              x1 = cos * x2 - sin * y2;
              y1 = cos * y2 + sin * x2;
              ball.vx = cos * vx1 - sin * vy1;
              ball.vy = cos * vy1 + sin * vx1;
              ball.x = line.x + x1;
              ball.y = line.y + y1;
            }
          }
                //normal motion code
          ball.x += ball.vx;
          ball.y += ball.vy;
          //bounce off ceiling, floor, and walls
          if (ball.x + ball.radius > canvas.width) {
            ball.x = canvas.width - ball.radius;
            ball.vx *= bounce;
          } else if (ball.x - ball.radius < 0) {
            ball.x = ball.radius;
            ball.vx *= bounce;
          }
          if (ball.y + ball.radius > canvas.height) {
            ball.y = canvas.height - ball.radius;
            ball.vy *= bounce;
          } else if (ball.y - ball.radius < 0) {
            ball.y = ball.radius;
            ball.vy *= bounce;
          }
          ball.draw(context);
        }
      }

      function drawLine (line) {
        checkLine(line);
        line.draw(context);
      }

      (function drawFrame () {
        window.requestAnimationFrame(drawFrame, canvas);
        stats.begin();

        context.clearRect(0, 0, canvas.width, canvas.height);

        lines.forEach(drawLine);
        stats.end();
      }());

